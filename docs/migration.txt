生成迁移
使用 Artisan 命令 make:migration 来创建迁移。

php artisan make:migration create_users_table

--table 和 --create 选项可用来指定数据表的名称，或是该迁移被执行时是否将创建的新数据表。这些选项需在预生成迁移文件时填入指定的数据表：

php artisan make:migration create_users_table --create=users

php artisan make:migration add_votes_to_users_table --table=users


运行迁移
执行 Artisan 命令 migrate 来运行所有未完成的迁移:

php artisan migrate

在生产环境强制执行迁移
一些迁移操作是具有破坏性的， 这意味着可能会导致数据丢失。 为了防止有人在生产环境中运行这些命令， 系统会在这些命令被运行之前与你进行确认。如果要强制忽略系统的提示运行命令， 则可以使用 --force 标记：

php artisan migrate --force

回滚迁移
若要回滚最后一次迁移， 可以使用 rollback 命令。 此命令将回滚最后一次 “迁移” 的操作，其中可能包含多个迁移文件：

php artisan migrate:rollback
你可以在 rollback 命令后面加上 step 参数，来限制回滚迁移的个数。 例如，以下命令将回滚最近五次迁移：

php artisan migrate:rollback --step=5

migrate:reset 命令可以回滚应用程序中的所有迁移：

php artisan migrate:reset
使用单个命令来执行回滚或迁移
migrate:refresh 命令不仅会回滚数据库的所有迁移还会接着运行 migrate 命令。 这个命令可以高效地重建整个数据库：

php artisan migrate:refresh


你可以在数据库结构生成器上使用以下命令来定义表的选项：

命令	描述
$table->engine = 'InnoDB';	指定表存储引擎 (MySQL)。
$table->charset = 'utf8';	指定数据表的默认字符集 (MySQL)。
$table->collation = 'utf8_unicode_ci';	指定数据表默认的排序规则 (MySQL)。
$table->temporary();	创建临时表 (不支持 SQL Server)。

重命名 / 删除数据表
若要重命名数据表，可以使用 rename 方法：

Schema::rename($from, $to);
删除一个已存在的数据表， 可使用 drop 或 dropIfExists 方法：

Schema::drop('users');

Schema::dropIfExists('users');


Schema::table('users', function (Blueprint $table) {
    $table->string('email');
});
可用的字段类型
数据库结构生成器包含构建表时可以指定的各种字段类型：

命令	描述
$table->bigIncrements('id');	递增 ID（主键），相当于「UNSIGNED BIG INTEGER」
$table->bigInteger('votes');	相当于 BIGINT
$table->binary('data');	相当于 BLOB
$table->boolean('confirmed');	相当于 BOOLEAN
$table->char('name', 100);	相当于带有长度的 CHAR
$table->date('created_at');	相当于 DATE
$table->dateTime('created_at');	相当于 DATETIME
$table->dateTimeTz('created_at');	相当于带时区 DATETIME
$table->decimal('amount', 8, 2);	相当于带有精度与基数 DECIMAL
$table->double('amount', 8, 2);	相当于带有精度与基数 DOUBLE
$table->enum('level', ['easy', 'hard']);	相当于 ENUM
$table->float('amount', 8, 2);	相当于带有精度与基数 FLOAT
$table->geometry('positions');	相当于 GEOMETRY
$table->geometryCollection('positions');	相当于 GEOMETRYCOLLECTION
$table->increments('id');	递增的 ID (主键)，相当于「UNSIGNED INTEGER」
$table->integer('votes');	相当于 INTEGER
$table->ipAddress('visitor');	相当于 IP 地址
$table->json('options');	相当于 JSON
$table->jsonb('options');	相当于 JSONB
$table->lineString('positions');	相当于 LINESTRING
$table->longText('description');	相当于 LONGTEXT
$table->macAddress('device');	相当于 MAC 地址
$table->mediumIncrements('id');	递增 ID (主键) ，相当于「UNSIGNED MEDIUM INTEGER」
$table->mediumInteger('votes');	相当于 MEDIUMINT
$table->mediumText('description');	相当于 MEDIUMTEXT
$table->morphs('taggable');	相当于加入递增的 taggable_id 与字符串 taggable_type
$table->multiLineString('positions');	相当于 MULTILINESTRING
$table->multiPoint('positions');	相当于 MULTIPOINT
$table->multiPolygon('positions');	相当于 MULTIPOLYGON
$table->nullableMorphs('taggable');	相当于可空版本的 morphs() 字段
$table->nullableTimestamps();	相当于可空版本的 timestamps() 字段
$table->point('position');	相当于 POINT
$table->polygon('positions');	相当于 POLYGON
$table->rememberToken();	相当于可空版本的 VARCHAR (100) 的 remember_token 字段
$table->smallIncrements('id');	递增 ID (主键) ，相当于「UNSIGNED SMALL INTEGER」
$table->smallInteger('votes');	相当于 SMALLINT
$table->softDeletes();	相当于为软删除添加一个可空的 deleted_at 字段
$table->softDeletesTz();	相当于为软删除添加一个可空的 带时区的 deleted_at 字段
$table->string('name', 100);	相当于带长度的 VARCHAR
$table->text('description');	相当于 TEXT
$table->time('sunrise');	相当于 TIME
$table->timeTz('sunrise');	相当于带时区的 TIME
$table->timestamp('added_on');	相当于 TIMESTAMP
$table->timestampTz('added_on');	相当于带时区的 TIMESTAMP
$table->timestamps();	相当于可空的 created_at 和 updated_at TIMESTAMP
$table->timestampsTz();	相当于可空且带时区的 created_at 和 updated_at TIMESTAMP
$table->tinyIncrements('id');	相当于自动递增 UNSIGNED TINYINT
$table->tinyInteger('votes');	相当于 TINYINT
$table->unsignedBigInteger('votes');	相当于 Unsigned BIGINT
$table->unsignedDecimal('amount', 8, 2);	相当于带有精度和基数的 UNSIGNED DECIMAL
$table->unsignedInteger('votes');	相当于 Unsigned INT
$table->unsignedMediumInteger('votes');	相当于 Unsigned MEDIUMINT
$table->unsignedSmallInteger('votes');	相当于 Unsigned SMALLINT
$table->unsignedTinyInteger('votes');	相当于 Unsigned TINYINT
$table->uuid('id');	相当于 UUID
$table->year('birth_year');	相当于 YEAR


字段修饰
除了上述列出的字段类型之外，还有几个可以在添加字段到数据库表时使用的 “修饰符”。例如，如果要把字段设置为 “可空 "， 你可以使用 nullable 方法：

Schema::table('users', function (Blueprint $table) {
    $table->string('email')->nullable();
});
以下是所有可用的字段修饰符的列表。此列表不包括 索引修饰符：

Modifier	Description
->after('column')	将此字段放置在其它字段 "之后" (MySQL)
->autoIncrement()	将 INTEGER 类型的字段设置为自动递增的主键
->charset('utf8')	指定一个字符集 (MySQL)
->collation('utf8_unicode_ci')	指定列的排序规则 (MySQL/SQL Server)
->comment('my comment')	为字段增加注释 (MySQL)
->default($value)	为字段指定 "默认" 值
->first()	将此字段放置在数据表的 "首位" (MySQL)
->nullable($value = true)	此字段允许写入 NULL 值（默认情况下）
->storedAs($expression)	创建一个存储生成的字段 (MySQL)
->unsigned()	设置 INTEGER 类型的字段为 UNSIGNED (MySQL)
->useCurrent()	将 TIMESTAMP 类型的字段设置为使用 CURRENT_TIMESTAMP 作为默认值
->virtualAs($expression)	创建一个虚拟生成的字段 (MySQL)


创建索引
结构生成器支持多种类型的索引。首先，先指定字段值唯一，即简单地在字段定义 之后链式调用 unique 方法来创建索引，例如：

$table->string('email')->unique();
或者，你也可以在定义完字段之后创建索引。例如：

$table->unique('email');
你甚至可以将数组传递给索引方法来创建一个复合（或合成）索引：

$table->index(['account_id', 'created_at']);
Laravel 会自动生成一个合理的索引名称，但你也可以传递第二个参数来自定义索引名称：

$table->unique('email', 'unique_email');


可用的索引类型
每个索引方法都接受一个可选的第二个参数来指定索引的名称。如果省略，名称将根据表和列的名称生成。

命令	描述
$table->primary('id');	添加主键
$table->primary(['id', 'parent_id']);	添加复合键
$table->unique('email');	添加唯一索引
$table->index('state');	添加普通索引
$table->spatialIndex('location');	添加空间索引（不支持 SQLite）






索引长度 & Mysql / MariaDB
Laravel 默认使用 utf8mb4 编码，它支持在数据库中储存 emojis 。如果你是在版本低于 5.7.7 的 MySQL 或者版本低于 10.2.2 的 MariaDB 上创建索引，那你就需要手动配置数据库迁移的默认字符串长度。
即在 AppServiceProvider 中调用 Schema::defaultStringLength 方法来配置它：

use Illuminate\Support\Facades\Schema;

/**
 * 引导任何应用程序服务
 *
 * @return void
 */
 public function boot()
 {
     Schema::defaultStringLength(191);
 }


重命名索引
若要重命名索引，你需要调用 renameIndex 方法。此方法接受当前索引名称作为其第一个参数，并将所需名称作为其第二个参数：
你需要将当前索引名称作为其第一个参数，并将新索引名称作为其第二个参数：

$table->renameIndex('from', 'to')


删除索引
若要删除索引，则必须指定索引的名称。Laravel 默认会自动将数据库名称、索引的字段名及索引类型简单地连接在一起作为名称。举例如下：

命令	描述
$table->dropPrimary('users_id_primary');	从 users 表中删除主键
$table->dropUnique('users_email_unique');	从 users 表中删除唯一索引
$table->dropIndex('geo_state_index');	从 geo 表中删除基本索引
$table->dropSpatialIndex('geo_location_spatialindex');	从 geo 表中删除空间索引（不支持 SQLite）
如果将字段数组传给 dropIndex 方法，会删除根据表名、字段和键类型生成的索引名称。



完成 seeder 类的编写之后，你可能需要使用 dump-autoload 命令重新生成 Composer 的自动加载器：

composer dump-autoload