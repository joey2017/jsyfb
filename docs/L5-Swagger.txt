<?php

schemes: 使用协议 (可以填多种协议)
host: 项目地址, 这个地址会作为每个接口的 url base ,拼接起来一期作为访问地址
consumes: 接口默认接收的MIME类型, 我的例子中的 formData 对应post表单类型. 注意这是项目默认值,在单个接口注释里可以复写这个值.
produces: 接口默认的回复MIME类型. api接口用的比较多的就是 application/json 和 application/xml.
@SWG\Info: 这个里面填写的东西,会放在文档的最开头,用作文档说明.
@SWG\Tag: tag是用来给文档分类的,name字段必须唯一.某个接口可以指定多个tag,那它就会出现在多组分类中. tag也可以不用在这里预先定义就可以使用,但那样就没有描述了. 多说无益,稍微用用就啥都明白了.

接口描述 (@SWGGet, @SWGPost 等) 常用字段:
summary - string
接口的简要介绍,会显示在接口标头上,不能超过120个字符

description - string
接口的详细介绍

externalDocs - string
外部文档链接

operationId - string
全局唯一的接口标识

consumes - [string]
接口接收的MIME类型

produces - [string]
接口返回的MIME类型,如 application/json

schemes -    [string]
接口所支持的协议,取值仅限: "http", "https", "ws", "wss"

parameters -    [Parameter Object | Reference Object]
参数列表


参数描述 (@SWGParameter) 常用字段:

name - string
参数名. 通过路径传参(in 取值 "path")时有注意事项,没用到,懒得看了...

in - string
参数从何处来. 必填. 取值仅限: "query", "header", "path", "formData", "body"

description - string
参数描述. 最好别太长

type - string
参数类型. 取值仅限: "string", "number", "integer", "boolean", "array", "file"

required - boolean
参数是否必须. 通过路径传参(in 取值 "path")时必须为 true.

default - *
默认值. 在你打算把参数通过 path 传递时规矩挺多,我没用到.用到的同学自己看文档吧.

/**
 * @SWG\Swagger(
 *     basePath="/api/v1",
 *     schemes={"http", "https"},
 *     host=L5_SWAGGER_CONST_HOST,
 *     @SWG\Info(
 *         version="1.0.0",
 *         title="L5 Swagger API",
 *         description="L5 Swagger API description",
 *         @SWG\Contact(
 *             email="darius@matulionis.lt"
 *         ),
 *     )
 * )
 */
/**
 * @SWG\SecurityScheme(
 *   securityDefinition="passport",
 *   type="oauth2",
 *   tokenUrl="/oauth/token",
 *   flow="password",
 *   scopes={}
 * )
 */
/**
 * @SWG\Get(
 *      path="/projects",
 *      operationId="getProjectsList",
 *      tags={"Projects"},
 *      summary="Get list of projects",
 *      description="Returns list of projects",
 *      @SWG\Response(
 *          response=200,
 *          description="successful operation"
 *       ),
 *       @SWG\Response(response=400, description="Bad request"),
 *       security={
 *           {"api_key_security_example": {}}
 *       }
 *     )
 *
 * Returns list of projects
 */
/**
 * @SWG\Get(
 *      path="/projects/{id}",
 *      operationId="getProjectById",
 *      tags={"Projects"},
 *      summary="Get project information",
 *      description="Returns project data",
 *      @SWG\Parameter(
 *          name="id",
 *          description="Project id",
 *          required=true,
 *          type="integer",
 *          in="path"
 *      ),
 *      @SWG\Response(
 *          response=200,
 *          description="successful operation"
 *       ),
 *      @SWG\Response(response=400, description="Bad request"),
 *      @SWG\Response(response=404, description="Resource Not Found"),
 *      security={
 *         {
 *             "oauth2_security_example": {"write:projects", "read:projects"}
 *         }
 *     },
 * )
 *
 */

 {
   "swagger": "2.0",
   "info": {
     "version": "1.0.0",
     "title": "Swagger Petstore",
     "description": "A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification",
     "termsOfService": "http://swagger.io/terms/",
     "contact": {
       "name": "Swagger API Team"
     },
     "license": {
       "name": "MIT"
     }
   },
   "host": "petstore.swagger.io",
   "basePath": "/api",
   "schemes": [
     "http"
   ],
   "consumes": [
     "application/json"
   ],
   "produces": [
     "application/json"
   ],
   "paths": {
     "/pets": {
       "get": {
         "description": "Returns all pets from the system that the user has access to",
         "operationId": "findPets",
         "produces": [
           "application/json",
           "application/xml",
           "text/xml",
           "text/html"
         ],
         "parameters": [
           {
             "name": "tags",
             "in": "query",
             "description": "tags to filter by",
             "required": false,
             "type": "array",
             "items": {
               "type": "string"
             },
             "collectionFormat": "csv"
           },
           {
             "name": "limit",
             "in": "query",
             "description": "maximum number of results to return",
             "required": false,
             "type": "integer",
             "format": "int32"
           }
         ],
         "responses": {
           "200": {
             "description": "pet response",
             "schema": {
               "type": "array",
               "items": {
                 "$ref": "#/definitions/Pet"
               }
             }
           },
           "default": {
             "description": "unexpected error",
             "schema": {
               "$ref": "#/definitions/ErrorModel"
             }
           }
         }
       },
       "post": {
         "description": "Creates a new pet in the store. Duplicates are allowed",
         "operationId": "addPet",
         "produces": [
           "application/json"
         ],
         "parameters": [
           {
             "name": "pet",
             "in": "body",
             "description": "Pet to add to the store",
             "required": true,
             "schema": {
               "$ref": "#/definitions/NewPet"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "pet response",
             "schema": {
               "$ref": "#/definitions/Pet"
             }
           },
           "default": {
             "description": "unexpected error",
             "schema": {
               "$ref": "#/definitions/ErrorModel"
             }
           }
         }
       }
     },
     "/pets/{id}": {
       "get": {
         "description": "Returns a user based on a single ID, if the user does not have access to the pet",
         "operationId": "findPetById",
         "produces": [
           "application/json",
           "application/xml",
           "text/xml",
           "text/html"
         ],
         "parameters": [
           {
             "name": "id",
             "in": "path",
             "description": "ID of pet to fetch",
             "required": true,
             "type": "integer",
             "format": "int64"
           }
         ],
         "responses": {
           "200": {
             "description": "pet response",
             "schema": {
               "$ref": "#/definitions/Pet"
             }
           },
           "default": {
             "description": "unexpected error",
             "schema": {
               "$ref": "#/definitions/ErrorModel"
             }
           }
         }
       },
       "delete": {
         "description": "deletes a single pet based on the ID supplied",
         "operationId": "deletePet",
         "parameters": [
           {
             "name": "id",
             "in": "path",
             "description": "ID of pet to delete",
             "required": true,
             "type": "integer",
             "format": "int64"
           }
         ],
         "responses": {
           "204": {
             "description": "pet deleted"
           },
           "default": {
             "description": "unexpected error",
             "schema": {
               "$ref": "#/definitions/ErrorModel"
             }
           }
         }
       }
     }
   },
   "definitions": {
     "Pet": {
       "type": "object",
       "allOf": [
         {
           "$ref": "#/definitions/NewPet"
         },
         {
           "required": [
             "id"
           ],
           "properties": {
             "id": {
               "type": "integer",
               "format": "int64"
             }
           }
         }
       ]
     },
     "NewPet": {
       "type": "object",
       "required": [
         "name"
       ],
       "properties": {
         "name": {
           "type": "string"
         },
         "tag": {
           "type": "string"
         }
       }
     },
     "ErrorModel": {
       "type": "object",
       "required": [
         "code",
         "message"
       ],
       "properties": {
         "code": {
           "type": "integer",
           "format": "int32"
         },
         "message": {
           "type": "string"
         }
       }
     }
   }
 }